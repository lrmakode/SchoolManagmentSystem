/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jmtv0.UI;

import Hibernate.Entity.ADDRESS;
import Hibernate.Entity.BUSFEE;
import jmtv0.pkg0.Utility.*;
import Hibernate.Entity.CLASS;
import Hibernate.Entity.FEEBREAKUP;
import Hibernate.Entity.STUDENT;
import Hibernate.Entity.STUDENTLEDGER;
import java.awt.Point;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jmtv0.pkg0.Utility.HibernateUtil;
import jmtv0.pkg0.Utility.TableWithButtonDemo;

//import jmtv0.pkg0.Utility.TableWithButtonDemo;
import jmtv0.pkg0.Utility.Utility;
import org.hibernate.Session;

/**
 *
 * @author Admin1
 */
public class FeeSubmissionForm extends javax.swing.JPanel implements UpdateFormData {

    private AddCustomerSO apo = null;

    /**
     * Creates new form FeeSubmissionForm
     */
    public FeeSubmissionForm() {
        initComponents();
        intForm();
        apo = new AddCustomerSO(this);
        curDate.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfIdStdnt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        feeBrupTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfSSO = new javax.swing.JTextField();
        tfFatherName = new javax.swing.JTextField();
        tfClass = new javax.swing.JTextField();
        curDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("SelectStudent SrNumber");

        tfIdStdnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfIdStdntActionPerformed(evt);
            }
        });
        tfIdStdnt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfIdStdntKeyTyped(evt);
            }
        });

        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel4.setText("Father Name");

        jLabel3.setText("Class");

        feeBrupTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(feeBrupTable);

        jLabel5.setText("SSO");

        tfClass.setEditable(false);
        tfClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfClassActionPerformed(evt);
            }
        });

        jLabel6.setText("Penalty Calculate Till This Date");

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfIdStdnt)
                            .addComponent(tfName)
                            .addComponent(tfClass, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfFatherName, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(tfSSO))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(curDate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfIdStdnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(tfFatherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))
                            .addComponent(curDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfIdStdntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfIdStdntActionPerformed
        curDate.setDate(new Date());
        updateFrData();
    }//GEN-LAST:event_tfIdStdntActionPerformed

    private void tfIdStdntKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdStdntKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9'))
                && (caracter != '\b')) {
            evt.consume();
        }          // TODO add your handling code here:
    }//GEN-LAST:event_tfIdStdntKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        openCustomerSelectionDialog(tfIdStdnt.getBounds());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tfClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfClassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfClassActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        updateFrData();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser curDate;
    private javax.swing.JTable feeBrupTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfClass;
    private javax.swing.JTextField tfFatherName;
    private javax.swing.JTextField tfIdStdnt;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSSO;
    // End of variables declaration//GEN-END:variables

    private void intForm() {
        Vector colsFeeBRUP = new Vector();
        colsFeeBRUP.addElement("Month");
        colsFeeBRUP.add("Tution Fee");
        colsFeeBRUP.add("Bus Fee");
        colsFeeBRUP.add("Library Fee");
        colsFeeBRUP.add("Stationary Fee");
        colsFeeBRUP.add("Dress Fee");
        colsFeeBRUP.add("Misc. Fee");
        colsFeeBRUP.add("Total Fee");
        colsFeeBRUP.add("Penalty");
        colsFeeBRUP.add("Total");
        colsFeeBRUP.add("Paid");
        colsFeeBRUP.add("Totua Due");

        Vector rowsFeeBRUP = new Vector();
        for (int i = 0; i < 12; i++) {
            Vector row = new Vector();
            String month = Utility.getMonthStrFromNum(i);
            row.add(month);
            rowsFeeBRUP.add(row);
        }
        DefaultTableModel dtmFeeBRUP = (DefaultTableModel) feeBrupTable.getModel();
        dtmFeeBRUP.setDataVector(rowsFeeBRUP, colsFeeBRUP);

    }

    private void openCustomerSelectionDialog(Rectangle bounds) {
        apo.setBounds(400, 400, 500, 500);
        Point p = tfIdStdnt.getLocationOnScreen();
        apo.setLocation(p.x, p.y + tfIdStdnt.getSize().height);
        apo.setVisible(true);
    }

    @Override
    public void updateVNData(int id) {
        tfIdStdnt.setText(id + "");
        updateFrData();
    }

    private void updateFrData() {
        String sso = tfIdStdnt.getText();
        if (sso.length() > 0) {
            Session ses = HibernateUtil.getSessionFactory().openSession();
            try {
                curDate.setEnabled(true);
                int idStudent = Integer.parseInt(sso);
                STUDENT lStdnt = Utility.getStudentWithID(ses, idStudent);
                if (lStdnt != null) {
                    tfName.setText(lStdnt.getFIRST_NAME() + " " + lStdnt.getMIDDLE_NAME() + " " + lStdnt.getLAST_NAME());
                    tfFatherName.setText(lStdnt.getFATHERS_NAME());
                    tfSSO.setText(lStdnt.getSSO());
                    float fBusFee = (float)0.0;
                    ADDRESS lAddr = lStdnt.getStdntAddress();
                    if (lAddr != null) {
                        BUSFEE  lBusfee = lAddr.getIdBusFee();
                        if(lBusfee != null){
                            fBusFee = lBusfee.getFARE();
                        }
                    }
                    CLASS lClass = lStdnt.getIdClass();
                    if (lClass != null) {
                        tfClass.setText(lClass.getIdClass() + "~" + lClass.getNameOfClass());
                    }
                    Vector colsFeeBRUP = new Vector();
                    colsFeeBRUP.add("Id");
                    colsFeeBRUP.add("Month");
                    colsFeeBRUP.add("Tution Fee");
                    colsFeeBRUP.add("Bus Fee");
                    colsFeeBRUP.add("Library Fee");
                    colsFeeBRUP.add("Stationary Fee");
                    colsFeeBRUP.add("Dress Fee");
                    colsFeeBRUP.add("Misc. Fee");
                    colsFeeBRUP.add("Total Fee");
                    colsFeeBRUP.add("Penalty");
                    colsFeeBRUP.add("Total");
                    colsFeeBRUP.add("Paid");
                    colsFeeBRUP.add("Totua Due");
                    colsFeeBRUP.add("Pay Due");
                    Calendar from = Calendar.getInstance();
                    if (lClass != null) {
                        from.setTime(lClass.getFromYear());
                    }
                    Calendar to = Calendar.getInstance();
                    if (lClass != null) {
                        to.setTime(lClass.getFromYear());
                    }
                    to.add(Calendar.YEAR, 1);
                    Calendar cu = Calendar.getInstance();
                    cu.setTime(curDate.getDate());
                    Vector rowsFeeBRUP = new Vector();
                    for (; from.before(to); from.add(Calendar.MONTH, 1)) {
                        Vector row = new Vector();
                        String month = Utility.getMonthStrFromNum(from.get(Calendar.MONTH)) + "~" + from.get(Calendar.YEAR);
                        FEEBREAKUP lFeeBRUP = Utility.getFeeBRUPWithFeeDetailsIDAndMonth(
                                lClass.getFeeDetails().getIdFeeDetails(),
                                from.get(Calendar.MONTH), ses);
                        if (lFeeBRUP != null) {
                            STUDENTLEDGER lSldgr = Utility.getStudentLDGRWithFeeBRUPIdAndSTDNTID(
                                    lStdnt.getIdStudent(),
                                    lFeeBRUP.getIdFeeBRUP(),
                                    ses);
                            if (lSldgr != null) {
                                row.add(lSldgr.getID());
                                row.add(month);
                                row.add(lFeeBRUP.getTutionFee());
                                row.add(fBusFee);
                                row.add(lFeeBRUP.getLibraryFee());
                                row.add(lFeeBRUP.getStationaryFee());
                                row.add(lFeeBRUP.getDressFee());
                                row.add(lFeeBRUP.getMiscFee());
                                float totalFee = lFeeBRUP.getTotalFee()+fBusFee;
                                double penalty = lSldgr.getPENALTY();
                                Date dueDate = lFeeBRUP.getDueDate();
                                if (dueDate != null) {
                                    Calendar du = Calendar.getInstance();
                                    du.setTime(dueDate);
                                    int diffYear = cu.get(Calendar.YEAR) - du.get(Calendar.YEAR);
                                    int diffMonth = diffYear * 12 + cu.get(Calendar.MONTH) - du.get(Calendar.MONTH);
                                    if (lClass.getPenaltyCycle() == 0) {
                                        if (diffMonth > 0) {
                                            penalty = (double) totalFee
                                                    * Math.pow((1.0 + ((double) lClass.getLateFeePercent() / 100.0)), diffMonth);
                                            penalty = penalty - totalFee;
                                        }
                                    }
                                }
                                penalty = Utility.roundToDecimal(penalty);
                                float grandTotla = totalFee + (float) penalty;
                                float paid = lSldgr.getAMT_TO_PAID();
                                float due = grandTotla - paid;
                                row.add(totalFee);
                                row.add(penalty);
                                row.add(grandTotla);
                                row.add(paid);
                                row.add(due);
                                row.add("Pay Due");
                            }
                        }
                        rowsFeeBRUP.add(row);
                    }
                    DefaultTableModel dtmFeeBRUP = (DefaultTableModel) feeBrupTable.getModel();
                    dtmFeeBRUP.setDataVector(rowsFeeBRUP, colsFeeBRUP);
                    feeBrupTable.getColumnModel().getColumn(13).setCellRenderer(new ClientsTableButtonRenderer());
                    feeBrupTable.getColumnModel().getColumn(13).setCellEditor(new ClientsTableRenderer(new JCheckBox()));
                } else {
                    JOptionPane.showMessageDialog(null, "No Student with this id");
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                ses.close();
            }
        }
    }

}
